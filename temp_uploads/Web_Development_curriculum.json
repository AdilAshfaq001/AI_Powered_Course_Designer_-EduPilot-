{
    "course_name": "Web Development",
    "approach": "Project-based",
    "assessments": "Quizzes, Projects, Exams",
    "semester_weeks": 15,
    "learning_objectives": [
        "1. Apply fundamental HTML and CSS principles to construct well-structured, styled, and static web pages from a design specification.",
        "2. Implement client-side interactivity and dynamic content by manipulating the Document Object Model (DOM) using core JavaScript concepts and event handling.",
        "3. Adapt web page layouts for various screen sizes, including mobile, tablet, and desktop, by implementing responsive design techniques such as media queries and flexible grids.",
        "4. Utilize JavaScript to asynchronously retrieve and display data from third-party Application Programming Interfaces (APIs) within a web application.",
        "5. Develop a complete, multi-page portfolio website that integrates HTML, CSS, and JavaScript, managing the project source code with Git and deploying the final product to a public web server."
    ],
    "curriculum_text": "**Module 1: Foundations of the Web: HTML, CSS, and Responsive Design**\nWeeks: 1-4\nLearning Objectives Covered: 1, 3, 5 (Git portion)\n\n1.  **Week 1: Introduction to Web Development and HTML**\n    *   **Topics**: Course overview, how the web works (HTTP/HTTPS, clients, servers), introduction to developer tools. Core HTML syntax, document structure (`<!DOCTYPE>`, `<html>`, `<head>`, `<body>`), essential tags (headings, paragraphs, lists, links, images), semantic HTML (`<header>`, `<nav>`, `<main>`, `<footer>`). Introduction to Git for version control.\n    *   **Activities**: Lab: Create a simple, single-page \"recipe\" or \"biography\" HTML document. Set up a GitHub account and initialize a Git repository for class projects.\n    *   **Assessment**: Quiz 1: Web Fundamentals and HTML Syntax.\n\n2.  **Week 2: Styling with CSS**\n    *   **Topics**: Introduction to Cascading Style Sheets (CSS), linking CSS to HTML. CSS syntax and rules. Selectors (element, class, ID, attribute). The Box Model (content, padding, border, margin). Core properties for text, color, and background styling.\n    *   **Activities**: Lab: Style the HTML page from Week 1 using basic CSS properties and selectors. Practice manipulating the box model in the browser's developer tools.\n    *   **Assessment**: Project 1 Assigned: Static Portfolio Homepage from a Design Specification.\n\n3.  **Week 3: Advanced CSS Layouts**\n    *   **Topics**: CSS positioning (static, relative, absolute, fixed, sticky). Display properties (block, inline, inline-block). Introduction to modern layout models: Flexbox (containers, items, main-axis, cross-axis). Introduction to CSS Grid.\n    *   **Activities**: Lab: Re-create common UI layout patterns (e.g., navigation bar, card gallery, two-column layout) using both Flexbox and Grid.\n    *   **Assessment**: Quiz 2: CSS Selectors and the Box Model.\n\n4.  **Week 4: Responsive Web Design**\n    *   **Topics**: The \"mobile-first\" approach. Using the viewport meta tag. Responsive units (%, vw, vh, rem). Implementing media queries to adapt styles for different screen sizes (mobile, tablet, desktop). Creating flexible images and media.\n    *   **Activities**: Lab: Apply responsive design principles and media queries to make the previous lab exercises adapt to mobile and desktop viewports.\n    *   **Assessment**: Project 1 Due: A fully responsive, static, single-page website built from a design specification, submitted via a GitHub repository.\n\n**Module 2: Client-Side Interactivity with JavaScript**\nWeeks: 5-8\nLearning Objectives Covered: 2\n\n5.  **Week 5: JavaScript Fundamentals**\n    *   **Topics**: Introduction to JavaScript and its role on the web. Variables (`let`, `const`), data types (strings, numbers, booleans, objects, arrays). Operators. Control flow (if/else statements, for/while loops). Writing JavaScript in the browser console.\n    *   **Activities**: Lab: A series of coding exercises focused on JavaScript syntax, logic, and control flow (e.g., \"fizzbuzz\", simple calculators).\n    *   **Assessment**: Quiz 3: JavaScript Variables, Data Types, and Control Flow.\n\n6.  **Week 6: JavaScript Functions and Scope**\n    *   **Topics**: Defining and calling functions (function declarations, function expressions, arrow functions). Function parameters and return values. Variable scope (global vs. local/function scope). Introduction to array methods (`.forEach()`, `.map()`, `.filter()`).\n    *   **Activities**: Lab: Refactor previous coding exercises into reusable functions. Create a small application that manipulates an array of data (e.g., filtering a list of products).\n    *   **Assessment**: Project 2 Assigned: Interactive UI Component (e.g., a \"To-Do List\" or a \"Modal Window\").\n\n7.  **Week 7: The Document Object Model (DOM)**\n    *   **Topics**: What is the DOM? Traversing the DOM. Selecting elements (`getElementById`, `querySelector`, `querySelectorAll`). Manipulating elements: changing text content (`.textContent`, `.innerHTML`), modifying attributes (`.setAttribute`), and altering styles (`.style`). Creating and appending new elements.\n    *   **Activities**: Lab: Write JavaScript to dynamically create an HTML list from an array. Build a script that changes the styling of elements on the page without user interaction.\n    *   **Assessment**: Quiz 4: Functions and DOM Selection.\n\n8.  **Week 8: Event Handling and Midterm Exam**\n    *   **Topics**: The event loop. Handling user interactions with event listeners (`.addEventListener`). Common event types (`click`, `submit`, `keydown`, `mouseover`). Accessing event object properties. Preventing default browser actions (`event.preventDefault()`).\n    *   **Activities**: Lab: Add event listeners to an existing HTML page to create a simple interactive component like an image gallery with \"next\" and \"previous\" buttons or an interactive form.\n    *   **Assessment**: Midterm Exam (covers Modules 1 & 2). Project 2 Due: A functional interactive component demonstrating DOM manipulation and event handling.\n\n**Module 3: Working with Asynchronous Data and APIs**\nWeeks: 9-11\nLearning Objectives Covered: 4\n\n9.  **Week 9: Introduction to APIs and JSON**\n    *   **Topics**: Understanding Application Programming Interfaces (APIs). The client-server model for data exchange. Overview of HTTP request methods (GET, POST). Introduction to JSON (JavaScript Object Notation) as a data format. Parsing and stringifying JSON.\n    *   **Activities**: Lab: Explore a public API (e.g., The Pok\u00e9API, GIPHY API) using a browser or a tool like Postman. Practice parsing JSON data strings into usable JavaScript objects.\n    *   **Assessment**: Quiz 5: API Concepts and JSON.\n\n10. **Week 10: Asynchronous JavaScript**\n    *   **Topics**: The problem of synchronous code (blocking). The asynchronous model. Introduction to Promises for managing async operations (`.then()`, `.catch()`, `.finally()`). Modern asynchronous syntax with `async/await` and `try...catch` blocks for error handling.\n    *   **Activities**: Lab: Write functions that simulate network requests using `setTimeout` and Promises. Refactor a Promise-based function to use `async/await` syntax.\n    *   **Assessment**: Project 3 Assigned: Single-Page Application that consumes a third-party API (e.g., a weather app, a movie search app).\n\n11. **Week 11: Using the Fetch API**\n    *   **Topics**: Making network requests from the browser using the Fetch API. Handling HTTP responses. Chaining promises to process the response data. Displaying fetched data in the DOM. Handling API errors gracefully.\n    *   **Activities**: Lab: Build a simple web page that fetches data from a public API on page load and dynamically creates HTML elements to display that data.\n    *   **Assessment**: Project 3 Due: A complete, single-page application that asynchronously retrieves and displays data from a third-party API.\n\n**Module 4: Capstone Portfolio Project and Deployment**\nWeeks: 12-15\nLearning Objectives Covered: 5\n\n12. **Week 12: Final Project Planning and Advanced Git**\n    *   **Topics**: Final Project Kickoff: The multi-page portfolio. Project architecture and planning (component breakdown, file structure). User experience considerations. Advanced Git workflows: creating and merging branches for feature development. Resolving merge conflicts.\n    *   **Activities**: In-class workshop to wireframe and plan the structure of the final portfolio project. Create a new Git repository for the final project and practice the feature branch workflow.\n    *   **Assessment**: Final Project Assigned: A complete, multi-page personal portfolio website integrating all concepts from the course.\n\n13. **Week 13: Project Work and Peer Review**\n    *   **Topics**: CSS transitions and animations for improved UX. Best practices for code organization and maintainability. Web accessibility (WCAG) basics.\n    *   **Activities**: In-class workshop dedicated to final project development. Structured peer-review session where students provide constructive feedback on each other's in-progress projects.\n    *   **Assessment**: Milestone 1: Submit link to portfolio repository with complete HTML structure and basic styling.\n\n14. **Week 14: Web Deployment**\n    *   **Topics**: What is web hosting? Domain names. Introduction to static site hosting platforms (e.g., Netlify, Vercel, GitHub Pages). The deployment process: connecting a GitHub repository to a hosting service for continuous deployment.\n    *   **Activities**: Lab: Guide students through deploying their completed portfolio projects to a public URL using a service like Netlify or GitHub Pages.\n    *   **Assessment**: Final Project Due: The complete, deployed multi-page portfolio website. Submission includes the link to the live site and the GitHub repository.\n\n15. **Week 15: Final Presentations and Final Exam**\n    *   **Topics**: Course wrap-up and review. Next steps in web development.\n    *   **Activities**: Students present a 5-minute demo of their final portfolio project to the class, explaining their design choices and technical implementation.\n    *   **Assessment**: Final Exam (Comprehensive, with emphasis on Modules 3 & 4)."
}